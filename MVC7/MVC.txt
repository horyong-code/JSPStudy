MVC.txt (P.556~ )

-디자인 패턴-

MVC 패턴 : 개발을 하기 위해서 구조를 Model, View, Controller로 구분하여 개발
           웹 / 모바일 / 프로그램에서 모두 사용
           
=> 관심사의 분리 => 좋은 코드 (결과)를 생성하기 위해서

Model : 자바 파일 (Plain Old Java Object / 순수 자바 [서블릿 X]) 
- 비지니스 로직을 처리하는 파일 (데이터 처리 - DB 처리 => Pro 페이지)

View : JSP 파일 - 화면을 구현하는 파일 (정보 출력)
Controller : Servlet 파일 - 자바 + JSP 연결

 요청 [request] -> 매핑 (배포서술자 web.xml / 어노테이션) -
 
    Front             [Controller (Action) + DAO]
 -> Controller (Servlet) <-> Model (Java) <-> DB
                         <-> View (JSP)
                         
실제 주소 : 해당 파일이 있는 주소 (경로) -> 절대 경로
	ex) D://workspace_JSP7/MVC7/src/main/webapp/start.jsp
가상 주소 : 해당 파일이 있는 가상의 주소
    ex) /webapp/start.jsp => /member
    
* MVC 패턴에서는 가상 주소를 사용한 페이지 이동
	(가상주소) ./member.me <=> /MVC7/member.me <=>   ./ => /프로젝트명/
	(실제주소 )./member.jsp ./member.css <=> ./ => /webapp/
	
	* 커넥션풀 : 디비 연결을 풀에다가 저장후 사용

 [커넥션 풀 X]
 사용자 요청 -> 직접 디비연결(생성)  -> SQL 실행 -> 직접 디비연결 해제
 
 [커넥션 풀 O]
 사용자 요청 -> 직접 디비연결X(생성x) -> 할당가능한 연결정보가 있는지 체크 -> pool [con][con][.][.][.]
 											1) 연결정보가 있을때
 											 	- 연결정보 객체를 빌려옴(객체 할당)
 											 	- SQL 실행
 											 	- 연결정보 객체를 반납 											 	
 											 	
 											2) 연결정보가 없을때
 												- 연결객체를 생성 or 대기
 												- 연결정보 객체를 빌려옴(객체 할당)
 											 	- SQL 실행
 											 	- 연결정보 객체를 반납 	



<Context>
	=> 프로젝트
	 <Resource  => 디비 연결데이터 
	  	name="jdbc/mvc"   리소스명 (외부에서 이름 호출)
	  	auth="Container"  자원관리자
	  	type="javax.sql.DataSource"  리소스 정보를 변경해서 사용하는 타입 
	  	driverClassName="com.mysql.cj.jdbc.Driver"	 드라이버 주소 
	  	username="root"   디비접속 아이디
	  	password="1234"   디비접속 비밀번호
	  	url="jdbc:mysql://localhost:3306/jspdb"  디비 접속주소
	  	maxWait="5000"   커넥션풀을 기다리는 시간  5s
	 />  
</Context>
	
	
// 게시판 만들기

- 게시판 글쓰기 (CREATE)
- 게시판 목록 리스트 조회 (READ)
- 게시판 본문보기 (READ)
- 게시판 수정하기 (UPDATE)
- 게시판 삭제하기 (DELETE)
- 게시판 답글달기
- 게시판 첨부파일

[MVC 구조]
- 사용자 요청 -> 매핑 : web.xml (배포 서술자) -> Controller <-> Model (DAO) <-> DB
                                                     ||
                                                    View                       
    