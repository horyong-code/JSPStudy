JSP.txt

정적 데이터 : HTML, CSS, JS, 이미지
동적 데이터 : JSP(JAVA)

JSP => Java Server Page [Java (서블릿) + HTML]

* JSP 지시어 (P.150 ~)
: JSP 페이지에서 실행할 때 필요한 정보를 작성하는 공간
  page 지시어, include 지시어, taglib 지시어

<%@ 내용 %>
	
<%@ page language (언어)="java" contentType (파일 형식)="text/html; charset (인코딩 방식)=UTF-8"
pageEncoding (인코딩 방식)="UTF-8"%>


* JSP 스크립트요소 (문법)
1) JSP 선언문 (Declaration) P.160 ~
   : 멤버 변수 / 멤버 메서드를 선언할 때 사용
   
   <%!
        int a; // 멤버 변수
        public void method(){
            // 멤버 메서드
        };
   
    %>
   
2) JSP 스크립틀릿 (Scriptlet) P.162 ~
   : 서블릿의 단점 보완
   : HTML 페이지에서 JAVA 코드를 사용하기 위해서 만들어진 문법
   
   <%
      실행문;
      int 변수; // 지역 변수
   %>

3) JSP 표현식
   : HTML 코드에 정보 (JSP) 출력
   
   <%=변수 / 값%>
   <%=메서드 호출 (리턴 O) / 수식%>


/*************************************************
 Java - Class (클래스)

 class 클래스명{
     int 변수명; // 멤버 변수 (전역 변수)
     int itwill;
     
     
     public void 메서드명(){ // 멤버 메서드 [멤버 : 변수 + 메서드]
            int 변수; // 지역 변수
            int busan;
            print(itwill);
            print(busan);
            
            표현식(itwill);
            표현식(busan);
     }
     
 }
 
 /*****************************************************************/
 
 액션태그 : JSP 페이지에서만 사용
            HTML 태그 형태로 JSP 동작을 수행 가능하게 하는 태그
           [정적]           [동적]
           
           <%@include%> : include 지시어
           => 페이지 내부에 속성 (값)을 추가할 때 사용
           => 페이지를 컴파일 하기 전에 소스코드를 include 후 컴파일 해서 사용
           <jsp:include/> : include 액션태그
           => 공통적인 페이지를 추가할 때 사용 (페이지의 제어권을 넘겨서 사용)
           => 페이지를 컴파일 후에 include해서 사용한다.
           
           
 JSP 내장 객체 [9개] (P.177 ~ 208)
 
 javax.servlet 패키지 [묶음 이름] - 8개
 1) request ! : 클라이언트의 HTTP 요청 정보를 저장한 객체
 2) response : HTTP 요청에 대한 처리 결과를 저장한 객체
 3) session ! : 클라이언트의 세션 정보를 저장한 객체
 4) pageContext ! : 페이지를 실행할 때 필요한 정보 (컨텍스트 = 프로젝트)를 저장하는 객체
 5) out : 응답 페이지 전송을 위한 출력 (스트림) 객체
 6) application ! : 애플리케이션의 컨텍스트 정보를 저장한 객체
 7) config : 페이지의 서블릿 설정 정보 (초기화 정보)
 8) page ! : 특정 페이지 서블릿 객체
 
 java.lang 패키지 - 1개
 1) exception : 예외 처리 객체
 
 
 
 * 영역 객체 (P.209 ~)
  - 영역 (Scope) : 속성을 공유할 수 있는 범위
  - 속성  (Attribute) : 공유 데이터
  
  
 [영역 (4)]      [영역 객체 (4) : 영역에서 속성을 사용할 수 있는 객체 (실행 객체)] [유효 범위]
  page          pageContext                                해당 페이지
  request       request                                    클라이언트 요청이 처리되는 페이지
  session       session                                    세션이 유지되는 동안 모든 페이지
  application   application                                서버가 실행되는 동안 모든 페이지
  
  
  * 영역 객체 사용
  영역객체.setAttribute("이름", 값); : 영역 객체에 이름에 값을 저장
  영역객체.getAttribute("이름"); : 영역 객체에 있는 이름으로 값을 사용
  
  
  * 세션 (Session) : 서버 측에서 관리하는 데이터 (컨테이너의 접속 종료전까지 유지)
  ** HTTP 프로토콜 통신의 특징 : 상태가 유지 X
  [클라이언트]                    [서버]
               요청 (Request)
               <=         =>
               응답 (Response)
               
	* 로그인 + 세션
 	=> 로그인이 유지되고 있음 (세션)
 
 	1) 로그인 창에 아이디 / 비밀번호 입력
 	2) 로그인 정보 처리 (admin / 1234) : 같은지 다른지 비교
 	3) 처리 로직에 따른 페이지 이동
 		3-1) 아이디가 O / X
 		3-2) 비밀번호가 O / X
	4) 정상 로그인 : (아이디 O / 비밀번호 O) -> 메인 페이지 이동
	   로그인 사용자 아이디를 세션에 저장
	   
	* 쿠키 (Cookie)	
 	=> HTTP 프로토콜 통신을 하는 경우 
 	요청에 대한 응답을 수행하는 경우 => 연결 지속 X (상태 유지 X)
 	=> 상태를 유지하기 위해서 쿠키 사용 (커피 쿠폰)
 	=> 쿠키는 사용자의 컴퓨터 하드디스크에 저장
 
 	- 이름, 값, 유효기간, 도메인, 경로, ...으로 구성
 	- 알파벳, 숫자로 구성
 
 
 	* 쿠키 (객체) 생성
 	Cookie cookie = new Cookie("이름", 값);
 
 	* 쿠키 전송
 	response.addCookie(cookie);
	

 
 
 	class Cookie{
   	int age; // 멤버 변수
   
   	public Cookie(){
    // 기본 생성자 : 멤버 변수를 초기화 => 객체 생성
    // age = 0;
   	}
   
   	public Cookie(int a, int b){
    // 오버로딩 메서드 (생성자)
    // => 오버로딩된 생성자가 있을 경우 기본 생성자는 자동 생성되지 않는다
   	}
   
   	// 메서드
   	public int getInt(){
   	return age;
   	}

 	}
 
 	변수 사용 규칙
 	1) 변수 선언
 	2) 변수 초기화
 	3) 변수 사용
 
 
 	P.372 ~ (데이터베이스)
 	P.413 ~ (SQL)
 	P.428 ~ (JDBC)

http://localhost:8088/JSP7/jdbc/dbConnectTest.jsp
	
	[프로토콜] :// [IP 주소]:[포트번호] / [실행주소]
	
	jdbc:mysql://localhost:3306/jspdb
    				 	  	
	[프로토콜] :// [IP 주소]:[포트번호] / [DB이름]
       
    
    public void test(int a, int b); 
    public void test(int x, int y); // 오버로딩 X (데이터타입 변화 X)
    
    public void test(int a, int b);
    public int test(int a, int b); // 오버로딩 X (리턴타입 영향 X)
    
    public void test(int a, long b);
    public void test(long a, int b); // 오버로딩 O
    => test(100, 200);
    => test(100L, 200);
    
    메서드 시그니쳐 : 컴파일러가 메서드를 구분하는 요소
    1) 메서드 이름
    2) 전달인자의 데이터타입
    3) 전달인자의 개수
    
    메서드 오버로딩 : 동일한 이름의 메서드를 사용
    => 전달인자의 정보 (타입, 개수)를 다르게 해서 사용
   
	패키지
	package com.itwillbs.ex;
	
	com.itwillbs.ex
	www.itillbs.com
	
	=> 패키지명 - 회사의 도메인 주소 사용
	
	www.itillbs.com
	=> com.itwillbs.~~~~
	
	www.busan.co.kr
	=> kr.co.busan.~
	
	P.245 ~ 
	자바빈 (JavaBean) : 자바빈 규칙을 통해 만들어진 자바 객체 (Bean = 객체)
	
    규약
    1. 특정 패키지에 포함되어야 함
    2. 기본 생성자가 있어야 함
    3. 멤버 변수는 private 접근 제한자 사용
    4. 멤버 변수에 접근 가능한 get / set 메서드 필요
    5. get / set 메서드는 public 접근 제한자 사용
    6. 
   
    클래스를 만들면 기본 생성자 자동 생성
    -> 오버로딩 생성자가 있는 경우 제외
    
    
    회원관리 시스템 (Member)
    1. 회원가입 (사용자가 입력한 정보 -> 저장)
    - 사용자 정보 입력
    - 사용자 정보를 처리 (DB에 저장)
    
    2. 로그인
	- 사용자 계정 정보 입력
	- 입력 정보 사용 -> 본인 확인
	
	3. 로그아웃
	
	4. 메인 페이지 - 사용자의 로그인 정보 체크   
	
	5. 개인 정보 조회
	
	6. 개인 정보 수정
	
	7. 개인 정보 삭제 (탈퇴)
	
	8. 관리자 - 회원 목록 확인
	
	
	
	-----------------------------------------------------------------
	board - 게시판
	1. 게시판 글 작성 (insert)
	
	2. 게시판 리스트 (list) + 페이징 처리
	
	3. 게시판 글 본문 보기 (info)
	
	4. 게시판 글 수정 (update)
	
	5. 게시판 글 삭제 (delete)
	
	+ 게시판 답글 쓰기 [!= 댓글]
	+ 게시판 첨부파일 업로드/다운로드
	
	
	* 예외 처리 : 예상하지 못한 예외 상황을 처리하는 구문
		=> 주로 외부 시스템과의 연결, IO, ...
		=> 예외가 발생하면 예외 객체를 생성, catch에게 던짐
		   받은 예외 객체를 확인 후 처리 
	
	* 자바에서는 예외 상황을 객체로 표시함
	
	try {
			Class.forName(DRIVER1);
			// 에러 발생!!! -> 모든 코드 실행 X
			Class.forName(DRIVER2);
		} catch (ClassNotFoundException e) { // 변수명 e -> 데이터타입 ClassNotFoundException
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		코드2;
		
	try{
		예외가 발생할지도 모르는 코드
	}catch(Exception e){
		예외 처리 (에러메세지 출력)
	}finally{
		예외 발생 여부와 상관없이 무조건 실행
	}
	
	
	* 배열
	기본형 타입 - 8개
	int[] arr = new int[10];
	
	참조형 타입 -> 객체 배열
	String[] arr2 = new String[10];
	BoardBean[] arr3 = new BoardBean[10];
	
	1) (X) - 객체 생성
	객체 배열은 객체를 생성하는 것이 아님
	BoardBean bb = new BoardBean();
	BoardBean bb = new BoardBean();
	...
	BoardBean bb = new BoardBean(); X10
	
	2) (O) - 변수 선언
	객체 배열은 객체 레퍼런스를 생성
	BoardBean bb;
	BoardBean bb;
	...		
	BoardBean bb; X10
		
	=> arr3[0] = new BoardBean();
	   arr3[0].setAAA(100);
	   
	==> 고정 길이 배열
	==> 가변 길이 배열
		ArrayList 객체 : 데이터의 개수에 따라 배열의 길이가 변경
	
	객체 생성
	ArrayList arr = new ArrayList();
	
	요소값 추가
	arr[0] = 값; (O)
	arr.add(값); (X)
	
	요소값 사용
	arr.get(인덱스);
	
	
	* 답글 처리 로직
	re_ref : 답글의 그룹 번호 [원글과 답글이 모두 동일한 값을 가지도록 하는 값 / 원글 = 답글]
		일반글 - 글 번호와 같음 (bno == re_ref)
		답글 - 원글의 ref값을 저장
		
	re_lev : 답글의 레벨값 (답글을 들여쓰기하는 값)
		일반글 - 항상 0 초기화
		답글 - 원글의 lev + 1 저장
	
	re_seq : 답글의 순서값 (답글을 정렬할 때 순서값)
		일반글 - 항상 0 초기화
		답글 - 원글의 seq + 1 저장
	
	------------------------------------------------------------
	bno        subject        re_ref        re_lev        re_seq
	------------------------------------------------------------
	1          일반1          1             0             0
	2          일반2          2             0             0
	3          일반3          3             0             0
	4          >답글1-1       1             1             1
	5          >답글3-1       3             1             1
	6          일반4          6             0             0
	7          >>답글1-1-1    1             2             2
	8          >>>답글1-1-1-1 1             3             3
	9          >>답글3-1-1    3             2             2
	10         >>답글4-1      6             1             1
	------------------------------------------------------------
	ORDER BY bno DESC; 
	=> ORDER BY re_ref DESC (내림차순), re_seq (오름차순);
	=> re_seq 값이 원글의 값보다 큰 값이 존재하는 경우 기존의 seq값 + 1 계산
 	------------------------------------------------------------
	bno        subject        re_ref        re_lev        re_seq
	------------------------------------------------------------
	3          일반3          3             0             0
	2          일반2          2             0             0
	5          >답글2-1       2             1             1
	6          >>답글2-1-1    2             2             2
	1          일반1          1             0             0
	9          >답글1-4       1             1             1
	8          >답글1-3       1             1             2(1+1)
	10         >>답글1-3-1    1             1             3
	7          >답글1-2       1             1             4(3+1)
	4          >답글1-1       1             1             5(4+1)
	------------------------------------------------------------
	
	
	MultipartRequest multi = new MultipartRequest(
		request, (폼태그 전달 정보)
		realPath, (실제 파일이 저장되는 장소)
		maxSize, (파일 크기 제한)
		"UTF-8", (한글 처리 인코딩)
		new DefaultFileRenamePolicy() (파일이름 중복 처리 객체)
		);
	=> 객체 생성 == 파일 업로드
	
	* 서블릿 (Servlet)
	JSP - Servlet
	JSP (Java Server Page) : 클라이언트의 요청을 처리해서 동적인 데이터 (DB)를
	사용 가능하도록 만들어주는 기술
	Servlet (Server Side Applet) : 자바코드로 동적데이터를 처리하는 기술
	
	JSP <=> Servlet (Java) <=> class
	   [실행]            [컴파일]
	** 서블릿의 경우는 코드 하나, 공백 하나 변경할 때마다 컴파일이 필요
	   JSP (HTML + Java) : 매번 컴파일 X
	   
	* 서블릿 사용 규칙
	1) javax.servlet.Servlet 인터페이스 구현
	2) 1을 구현하기 힘든 경우, javax.servlet.http.HttpServlet 클래스 상속 [일반적]
	3) doGet(), doPost(0 메서드를 선언 (오버라이딩)
	   (javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse 전달인자 필수로 구현)
	4) java.io.IOException, javax.servlet.ServletException을 통한 예외 처리 (예외 던지기)
	5) 배포 서술자 (web.xml)를 사용해서 서블릿과 주소 (url)을 매핑 (서블릿 3.0 이상은 어노테이션 지원)
	
	<!-- web.xml (배포 서술자) : URL과 서블릿 클래스 매핑 -->
	서블릿 클래스 정보 저장
  <servlet>
  	<servlet-name> 서블릿 객체 이름 </servlet-name>
  	<servlet-class> 서블릿 클래스의 위치 </servlet-class>
  </servlet>
    서블릿 클래스와 URL 주소 매핑
  <servlet-mapping>
	<servlet-name> 서블릿 객체 이름 </servlet-name>
	<url-pattern> URL 주소 </url-pattern>
  </servlet-mapping>
  
  
  * JSP -> Servlet 변경 (자동 변경)
  - JSP 페이지를 실행할 때 (= 컴파일 할 때) Servlet으로 변경
  - JSP 스크립틀릿 (<% %>) 코드는 Servlet-service() 메서드 안에 작성
  - JSP 선언문 (<%! %>) 코드는 Servlet 안에 멤버의 형태로 작성
  - JSP 표현식 (<%= %>) 코드는 Servlet-service() 안에 out.println()로 변경
  - HTML 코드는 Servlet-service() 안에 out.write()로 변경
  
  
  * EL (Expression Language) [+ JSTL]
  - 표현(식) 언어
  => 사용 목적 : 간편한 출력
                 out.println(), <%= %>을 대신하기 위한 표현법
     사용 방법 : ${변수 } / ${식(연산) } / ${메서드 호출 (단, 리턴이 있는 경우}
     
     EL 내장 객체 (11) (P.513)
     pageScope, requestScope, sessionScope, applicationScope - page [request, session, application] 영역의 객체 참조
     param, paramValues [배열]
     header, headerValues [배열]
     cookie 
     initParam
     pageContext
     
     EL 연산자 (P.516 ~ 517)
     산술 연산자 (+, -, *, /, %)
     논리 연산자 (&&, ||, !)
     비교 연산자 (==, !=, >, <, >=, <=)
     (. : 객체 접근 / [] : 배열 접근 / () : 우선순위 / X? a : b / empty : 값이 없으면 'true')
     
     
  * 데이터 타입
  1) 기본형 타입 - 8개
  	   형변환    - 자동 형변환 (묵시적 형변환)
  	               메모리 크기가 작은 곳 -> 큰 곳
  	             - 강제 형변환 (명시적 형변환)
  	               메모리 크기가 큰 곳 -> 작은 곳
  	               => 개발자가 문제 상황을 확인하고 처리한다라는 의미
  2) 참조형 타입 - 8개를 제외한 모든 타입
  	   * 상속 관계 필수
  	   형변환    - 자동 형변환 (업캐스팅)
  	               부모 클래스 타입으로 변환
  	             - 강제 형변환 (다운캐스팅)
  	               자식 클래스 타입으로 변환
                   => 개발자가 문제 상황을 확인하고 처리한다라는 의미
                   
                   
  * JSTL (JSP Standard Tag Library) [P.519 ~ 526]
  => 자카르타 (아파치)에서 제공하는 자주 사용되는 태그를 기능별로 모아놓은 라이브러리
  
  - CORE 라이브러리 : 기본적인 기능 [변수 생성, 출력, 조건문, 반복문]
  - Formatting 라이브러리 : 형태를 처리하는 기능 (숫자, 날짜 시간)
		
		
		